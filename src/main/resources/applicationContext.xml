<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--开启注解，扫描表，创建对象-->
    <context:component-scan base-package="com.itheima"></context:component-scan>

    <bean id="log" class="com.itheima.log.Logger"></bean>

    <!--配置aop-->
    <aop:config>
        <!--配置切面: ref=log :关联指定我的通知对象-->
        <aop:aspect ref="log">
            <!--切入点的配置:在执行什么方法的时候需要增强,当拦截到方法的时候需要通知日志对象去执行-->
            <!--
                execution(* com.itheima.service..*.*(..))
                    第一个* : 任意返回值
                    ..: 两个连续的点：包，及其子包
                    第二个*：所有的类
                    第三个* ：所有的方法
                    (..): 任意参数

            -->
            <aop:pointcut id="pointcut" expression="execution(* com.itheima.service..*.*(..))"></aop:pointcut>
            <!--织入： 配置前置通知: 关联切入点，指定前置增强执行的方法-->
            <!--<aop:before method="before" pointcut-ref="pointcut"></aop:before>-->
            <!--配置的在返回值之前执行:在出现异常的时候不会执行-->
            <!--<aop:after-returning method="afterReturning" pointcut-ref="pointcut"></aop:after-returning>-->
            <!--返回值之后执行: finally,最终增强-->
            <!--<aop:after method="after" pointcut-ref="pointcut"></aop:after>-->
            <!--出现异常的时候增强-->
            <!--<aop:after-throwing method="afterThrowing" pointcut-ref="pointcut"></aop:after-throwing>-->
            <aop:around method="around" pointcut-ref="pointcut"></aop:around>
        </aop:aspect>
    </aop:config>
</beans>